{"ast":null,"code":"import * as api from '../api';\nimport { CREATE, FETCH_ALL, DELETE, UPDATE, LIKE } from '../constants/actionTypes';\nexport const getPosts = () => async dispatch => {\n  try {\n    const {\n      data\n    } = await api.fetchPosts();\n    dispatch({\n      type: FETCH_ALL,\n      payload: data\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const getPostsBySearch = searchQuery => async dispatch => {\n  try {\n    const {\n      data\n    } = await api.fetchPostsBySearch(searchQuery);\n    dispatch({\n      type: FETCH_ALL,\n      payload: data\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const createPost = post => async dispatch => {\n  try {\n    const {\n      data\n    } = await api.createPost(post);\n    dispatch({\n      type: CREATE,\n      payload: data\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const updatePost = (id, post) => async dispatch => {\n  try {\n    const {\n      data\n    } = await api.updatePost(id, post);\n    dispatch({\n      type: UPDATE,\n      payload: data\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const deletePost = id => async dispatch => {\n  try {\n    await api.deletePost(id);\n    dispatch({\n      type: DELETE,\n      payload: id\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const likePost = id => async dispatch => {\n  try {\n    const {\n      data\n    } = await api.likePost(id);\n    dispatch({\n      type: LIKE,\n      payload: data\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};","map":{"version":3,"sources":["/home/adrien/Documents/web_dev/REACT/mern_memories/client/src/actions/posts.jsx"],"names":["api","CREATE","FETCH_ALL","DELETE","UPDATE","LIKE","getPosts","dispatch","data","fetchPosts","type","payload","error","console","log","getPostsBySearch","searchQuery","fetchPostsBySearch","createPost","post","updatePost","id","deletePost","likePost"],"mappings":"AAAA,OAAO,KAAKA,GAAZ,MAAqB,QAArB;AACA,SAASC,MAAT,EAAiBC,SAAjB,EAA4BC,MAA5B,EAAoCC,MAApC,EAA4CC,IAA5C,QAAwD,0BAAxD;AAEA,OAAO,MAAMC,QAAQ,GAAG,MAAM,MAAOC,QAAP,IAAoB;AAC9C,MAAI;AACA,UAAM;AAAEC,MAAAA;AAAF,QAAW,MAAMR,GAAG,CAACS,UAAJ,EAAvB;AACAF,IAAAA,QAAQ,CAAC;AAAEG,MAAAA,IAAI,EAAER,SAAR;AAAmBS,MAAAA,OAAO,EAAEH;AAA5B,KAAD,CAAR;AACH,GAHD,CAGE,OAAOI,KAAP,EAAc;AACZC,IAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACH;AACJ,CAPM;AASP,OAAO,MAAMG,gBAAgB,GAAIC,WAAD,IAAiB,MAAOT,QAAP,IAAoB;AACjE,MAAI;AACA,UAAM;AAAEC,MAAAA;AAAF,QAAW,MAAMR,GAAG,CAACiB,kBAAJ,CAAuBD,WAAvB,CAAvB;AACAT,IAAAA,QAAQ,CAAC;AAAEG,MAAAA,IAAI,EAAER,SAAR;AAAmBS,MAAAA,OAAO,EAAEH;AAA5B,KAAD,CAAR;AACH,GAHD,CAGE,OAAOI,KAAP,EAAc;AACZC,IAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACH;AACJ,CAPM;AAUP,OAAO,MAAMM,UAAU,GAAIC,IAAD,IAAU,MAAOZ,QAAP,IAAoB;AACpD,MAAI;AACA,UAAM;AAAEC,MAAAA;AAAF,QAAW,MAAMR,GAAG,CAACkB,UAAJ,CAAeC,IAAf,CAAvB;AACAZ,IAAAA,QAAQ,CAAC;AAAEG,MAAAA,IAAI,EAAET,MAAR;AAAgBU,MAAAA,OAAO,EAAEH;AAAzB,KAAD,CAAR;AACH,GAHD,CAGE,OAAOI,KAAP,EAAc;AACZC,IAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACH;AACJ,CAPM;AASP,OAAO,MAAMQ,UAAU,GAAG,CAACC,EAAD,EAAKF,IAAL,KAAc,MAAOZ,QAAP,IAAoB;AACxD,MAAI;AACA,UAAM;AAAEC,MAAAA;AAAF,QAAW,MAAMR,GAAG,CAACoB,UAAJ,CAAeC,EAAf,EAAmBF,IAAnB,CAAvB;AACAZ,IAAAA,QAAQ,CAAC;AAAEG,MAAAA,IAAI,EAAEN,MAAR;AAAgBO,MAAAA,OAAO,EAAEH;AAAzB,KAAD,CAAR;AACH,GAHD,CAGE,OAAOI,KAAP,EAAc;AACZC,IAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACH;AACJ,CAPM;AASP,OAAO,MAAMU,UAAU,GAAID,EAAD,IAAQ,MAAOd,QAAP,IAAoB;AAClD,MAAI;AACA,UAAMP,GAAG,CAACsB,UAAJ,CAAeD,EAAf,CAAN;AACAd,IAAAA,QAAQ,CAAC;AAAEG,MAAAA,IAAI,EAAEP,MAAR;AAAgBQ,MAAAA,OAAO,EAAEU;AAAzB,KAAD,CAAR;AACH,GAHD,CAGE,OAAOT,KAAP,EAAc;AACZC,IAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACH;AACJ,CAPM;AASP,OAAO,MAAMW,QAAQ,GAAIF,EAAD,IAAQ,MAAOd,QAAP,IAAoB;AAChD,MAAI;AACA,UAAM;AAAEC,MAAAA;AAAF,QAAW,MAAMR,GAAG,CAACuB,QAAJ,CAAaF,EAAb,CAAvB;AACAd,IAAAA,QAAQ,CAAC;AAAEG,MAAAA,IAAI,EAAEL,IAAR;AAAcM,MAAAA,OAAO,EAAEH;AAAvB,KAAD,CAAR;AACH,GAHD,CAGE,OAAOI,KAAP,EAAc;AACZC,IAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACH;AACJ,CAPM","sourcesContent":["import * as api from '../api';\nimport { CREATE, FETCH_ALL, DELETE, UPDATE, LIKE } from '../constants/actionTypes';\n\nexport const getPosts = () => async (dispatch) => {\n    try {\n        const { data } = await api.fetchPosts();\n        dispatch({ type: FETCH_ALL, payload: data });\n    } catch (error) {\n        console.log(error);\n    }\n}\n\nexport const getPostsBySearch = (searchQuery) => async (dispatch) => {\n    try {\n        const { data } = await api.fetchPostsBySearch(searchQuery);\n        dispatch({ type: FETCH_ALL, payload: data });\n    } catch (error) {\n        console.log(error);\n    }\n}\n\n\nexport const createPost = (post) => async (dispatch) => {\n    try {\n        const { data } = await api.createPost(post);\n        dispatch({ type: CREATE, payload: data });\n    } catch (error) {\n        console.log(error);\n    }\n}\n\nexport const updatePost = (id, post) => async (dispatch) => {\n    try {\n        const { data } = await api.updatePost(id, post);\n        dispatch({ type: UPDATE, payload: data });\n    } catch (error) {\n        console.log(error);\n    }\n}\n\nexport const deletePost = (id) => async (dispatch) => {\n    try {\n        await api.deletePost(id);\n        dispatch({ type: DELETE, payload: id });\n    } catch (error) {\n        console.log(error);\n    }\n}\n\nexport const likePost = (id) => async (dispatch) => {\n    try {\n        const { data } = await api.likePost(id);\n        dispatch({ type: LIKE, payload: data });\n    } catch (error) {\n        console.log(error);\n    }\n}"]},"metadata":{},"sourceType":"module"}