{"ast":null,"code":"import * as api from '../api';\nimport { CREATE, FETCH_ALL, FETCH_BY_SEARCH, DELETE, UPDATE, LIKE } from '../constants/actionTypes';\nexport const getPosts = page => async dispatch => {\n  try {\n    const {\n      data: {\n        data,\n        currentPage,\n        numberOfPages\n      }\n    } = await api.fetchPosts(page);\n    dispatch({\n      type: FETCH_ALL,\n      payload: {\n        data,\n        currentPage,\n        numberOfPages\n      }\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const getPostsBySearch = searchQuery => async dispatch => {\n  try {\n    const {\n      data: {\n        data\n      }\n    } = await api.fetchPostsBySearch(searchQuery);\n    dispatch({\n      type: FETCH_BY_SEARCH,\n      payload: data\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const createPost = post => async dispatch => {\n  try {\n    const {\n      data\n    } = await api.createPost(post);\n    dispatch({\n      type: CREATE,\n      payload: data\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const updatePost = (id, post) => async dispatch => {\n  try {\n    const {\n      data\n    } = await api.updatePost(id, post);\n    dispatch({\n      type: UPDATE,\n      payload: data\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const deletePost = id => async dispatch => {\n  try {\n    await api.deletePost(id);\n    dispatch({\n      type: DELETE,\n      payload: id\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const likePost = id => async dispatch => {\n  try {\n    const {\n      data\n    } = await api.likePost(id);\n    dispatch({\n      type: LIKE,\n      payload: data\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};","map":{"version":3,"sources":["/home/adrien/Documents/web_dev/REACT/mern_memories/client/src/actions/posts.jsx"],"names":["api","CREATE","FETCH_ALL","FETCH_BY_SEARCH","DELETE","UPDATE","LIKE","getPosts","page","dispatch","data","currentPage","numberOfPages","fetchPosts","type","payload","error","console","log","getPostsBySearch","searchQuery","fetchPostsBySearch","createPost","post","updatePost","id","deletePost","likePost"],"mappings":"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","sourcesContent":["import * as api from '../api';\nimport { CREATE, FETCH_ALL, FETCH_BY_SEARCH, DELETE, UPDATE, LIKE } from '../constants/actionTypes';\n\nexport const getPosts = (page) => async (dispatch) => {\n    try {\n        const { data: { data, currentPage, numberOfPages }} = await api.fetchPosts(page);\n\n        dispatch({ type: FETCH_ALL, payload: { data, currentPage, numberOfPages } });\n    } catch (error) {\n        console.log(error);\n    }\n}\n\nexport const getPostsBySearch = (searchQuery) => async (dispatch) => {\n    try {\n        const { data: { data } } = await api.fetchPostsBySearch(searchQuery);\n        dispatch({ type: FETCH_BY_SEARCH, payload: data });\n    } catch (error) {\n        console.log(error);\n    }\n}\n\nexport const createPost = (post) => async (dispatch) => {\n    try {\n        const { data } = await api.createPost(post);\n        dispatch({ type: CREATE, payload: data });\n    } catch (error) {\n        console.log(error);\n    }\n}\n\nexport const updatePost = (id, post) => async (dispatch) => {\n    try {\n        const { data } = await api.updatePost(id, post);\n        dispatch({ type: UPDATE, payload: data });\n    } catch (error) {\n        console.log(error);\n    }\n}\n\nexport const deletePost = (id) => async (dispatch) => {\n    try {\n        await api.deletePost(id);\n        dispatch({ type: DELETE, payload: id });\n    } catch (error) {\n        console.log(error);\n    }\n}\n\nexport const likePost = (id) => async (dispatch) => {\n    try {\n        const { data } = await api.likePost(id);\n        dispatch({ type: LIKE, payload: data });\n    } catch (error) {\n        console.log(error);\n    }\n}"]},"metadata":{},"sourceType":"module"}